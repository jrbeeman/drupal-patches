diff -upr ../feeds-6.x-1.x-dev/plugins/FeedsParser.inc ./plugins/FeedsParser.inc
--- ../feeds-6.x-1.x-dev/plugins/FeedsParser.inc	2010-07-28 14:12:43.000000000 -0700
+++ ./plugins/FeedsParser.inc	2010-08-23 08:22:08.000000000 -0700
@@ -166,27 +166,44 @@ class FeedsEnclosure extends FeedsElemen
    * @return
    *   A temporary file path to the downloaded resource referenced by the
    *   enclosure. Downloads resource if not downloaded yet. The file path is
-   *   valid for the time of the page load.
+   *   valid for the time of the page load. If the enclosure contains a 
+   *   relative path it assumes that it is relative to the site's files 
+   *   directory under feeds/ 
+   *   (e.g. sites/defaults/files/feeds/MYDIR/MYFILE.ogg).
    *
    * @todo Get file extension from mime_type.
    * @todo This is not concurrency safe.
    */
   public function getFile() {
     if(empty($this->file) && $this->getValue()) {
-      $filename = basename($this->getValue());
-      if (module_exists('transliteration')) {
-        require_once (drupal_get_path('module', 'transliteration') . '/transliteration.inc');
-        $filename = transliteration_clean_filename($filename);
-      }
-      $dest = file_destination(file_directory_temp() .'/'. get_class($this) .'-'. $filename, FILE_EXISTS_RENAME);
-      if (ini_get('allow_url_fopen')) {
-        $this->file = copy($this->getValue(), $dest) ? $dest : 0;
+      // If file path is local and not absolute, assume that it points to a
+      // site's files directory under feeds/.
+      if (!preg_match('@^((ftp|https?)://|/)@', $this->getValue())) {
+        $file = file_directory_path() . '/feeds/' . $this->getValue();
+        if (!file_check_location($file, file_directory_path())) {
+          throw new Exception(t('Invalid file path.'));
+        }
+        if (!is_file($file)) {
+          throw new Exception(t('File %file not found.', array('%file' => $file)));
+        }
+        $this->file = $file;
       }
       else {
-        $this->file = file_save_data($this->getContent(), $dest);
-      }
-      if ($this->file === 0) {
-        throw new Exception(t('Cannot write content to %dest', array('%dest' => $dest)));
+        $filename = basename($this->getValue());
+        if (module_exists('transliteration')) {
+          require_once (drupal_get_path('module', 'transliteration') . '/transliteration.inc');
+          $filename = transliteration_clean_filename($filename);
+        }
+        $dest = file_destination(file_directory_temp() .'/'. $filename, FILE_EXISTS_RENAME);
+        if (ini_get('allow_url_fopen')) {
+          $this->file = copy($this->getValue(), $dest) ? $dest : 0;
+        }
+        else {
+          $this->file = file_save_data($this->getContent(), $dest);
+        }
+        if ($this->file === 0) {
+          throw new Exception(t('Cannot write content to %dest', array('%dest' => $dest)));
+        }
       }
     }
     return $this->file;
